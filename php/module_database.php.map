{"version":3,"names":[],"mappings":"","sources":["module_database.php"],"sourcesContent":["<?php\r\nclass Database {\r\n  public $pdo;\r\n  protected $server;\r\n  protected $userName;\r\n  protected $password;\r\n  protected $dbName;\r\n  protected $options;\r\n\r\n  public function __construct(){\r\n    //info login depuis un fichier à implémenter\r\n    $this->server = 'localhost';\r\n    $this->userName = 'root';\r\n    $this->password = 'root';\r\n    $this->dbName = 'fauves';\r\n    $this->options = array(\r\n      PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8',\r\n    );\r\n  }\r\n\r\n  private function getPDO() {\r\n    if($this->pdo === null) {\r\n      try{\r\n        $pdo = new PDO('mysql:host='.$this->server.';dbname='.$this->dbName,$this->userName,$this->password,$this->options);\r\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n        $this->pdo = $pdo;\r\n      }\r\n      catch(Exception $e){\r\n          die('Erreur : '.$e->getMessage());\r\n      }\r\n    }\r\n    return $this->pdo;\r\n  }\r\n\r\n  //public pour test puis mettre en privé et coupler avec buildQuery\r\n  public function sendQuery($statement) {\r\n    $qry = $this->getPDO()->query($statement);\r\n    $data = $qry->fetch();\r\n    return $data;\r\n  }\r\n\r\n  /*\r\n  Construit la requete, vérifie la validité du contenu entré grace à la fct check entry\r\n  param : table de la bdd dans laquelle on cherche\r\n  param : tableau asociant champs et entrées de l'utilisateur\r\n  retour : query mysql\r\n  */\r\n  public function buildQuery( $table, $entries){\r\n\r\n  }\r\n\r\n/* Intégré à build query ou pas\r\n  public function check_entry($entries) {\r\n\r\n  }\r\n*/\r\n}\r\n\r\n\r\n ?>\r\n"],"file":"module_database.php"}